[{"/Users/taylortompkins/Ada/climb-it-change-react/src/components/Calendar.js":"1","/Users/taylortompkins/Ada/climb-it-change-react/src/components/Task.js":"2","/Users/taylortompkins/Ada/climb-it-change-react/src/App.js":"3","/Users/taylortompkins/Ada/climb-it-change-react/src/components/Users.js":"4","/Users/taylortompkins/Ada/climb-it-change-react/src/components/NewUserForm.js":"5","/Users/taylortompkins/Ada/climb-it-change-react/src/index.js":"6","/Users/taylortompkins/Ada/climb-it-change-react/src/components/Workouts.js":"7","/Users/taylortompkins/Ada/climb-it-change-react/src/components/CalendarContent.js":"8","/Users/taylortompkins/Ada/climb-it-change-react/src/components/Dashboard.js":"9","/Users/taylortompkins/Ada/climb-it-change-react/src/components/SetTask.js":"10","/Users/taylortompkins/Ada/climb-it-change-react/src/components/Homepage.js":"11","/Users/taylortompkins/Ada/climb-it-change-react/src/components/Plan.js":"12","/Users/taylortompkins/Ada/climb-it-change-react/src/reportWebVitals.js":"13"},{"size":10120,"mtime":1613509616647,"results":"14","hashOfConfig":"15"},{"size":296,"mtime":1613511801360,"results":"16","hashOfConfig":"15"},{"size":4863,"mtime":1613511564381,"results":"17","hashOfConfig":"15"},{"size":1229,"mtime":1613497921957,"results":"18","hashOfConfig":"15"},{"size":1925,"mtime":1613275075754,"results":"19","hashOfConfig":"15"},{"size":555,"mtime":1613434286434,"results":"20","hashOfConfig":"15"},{"size":1120,"mtime":1613014768747,"results":"21","hashOfConfig":"15"},{"size":707,"mtime":1613356867853,"results":"22","hashOfConfig":"15"},{"size":7519,"mtime":1613511557540,"results":"23","hashOfConfig":"15"},{"size":362,"mtime":1613511791649,"results":"24","hashOfConfig":"15"},{"size":1013,"mtime":1613430905958,"results":"25","hashOfConfig":"15"},{"size":1572,"mtime":1613283696478,"results":"26","hashOfConfig":"15"},{"size":362,"mtime":1612220073930,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"6e1218",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/taylortompkins/Ada/climb-it-change-react/src/components/Calendar.js",["58","59","60"],"import React, { useEffect, useState } from 'react';\nimport Day from './Day'\nimport Task from './Task'\nimport './Calendar.css';\nimport CalendarContent from './CalendarContent'\nimport axios from 'axios';\n\nconst Calendar = (props) => {\n    const tasks = [\n        {name:\"Workout #1\", id: 1, type: 'workout', category: \"not_set\", complete: false},\n        {name:\"Workout #2\", id: 2, type: 'workout', category: \"not_set\", complete: false},\n        {name:\"Climbing Sesh #1\", id: 3, type: 'sesh', category: \"not_set\", complete: false},\n        {name:\"Climbing Sesh #2\", id: 4, type: 'sesh', category: \"not_set\", complete: false},\n        {name:\"Antagonist #1\", id: 5, type: 'ant', category: \"not_set\", complete: false},\n        {name:\"Antagonist #2\", id: 6, type: 'ant', category: \"not_set\", complete: false},\n        {name:\"Free Climb!\", id: 7, type: 'sesh', category: \"not_set\", complete: false}\n    ]\n    const days = [\n        {name: \"Todo\", id: 'todo', tasks: []},\n        {name: \"Sunday\", id: 'sunday', tasks: []},\n        {name: \"Monday\", id: 'monday', tasks: []},\n        {name: \"Tuesday\", id: 'tuesday', tasks: []},\n        {name: \"Wednesday\", id: 'wednesday', tasks: []},\n        {name: \"Thursday\", id: 'thursday', tasks: []},\n        {name: \"Friday\", id: 'friday', tasks: []},\n        {name: \"Saturday\", id: 'saturday', tasks: []}\n    ]\n    \n    const [currentDay, setCurrentDay] = useState(null)\n    const [currentTask, setCurrentTask] = useState(null)\n    const [todo, setTodo] = useState(tasks)\n    const [sun, setSun] = useState([])\n    const [mon, setMon] = useState([])\n    const [tues, setTues] = useState([])\n    const [wed, setWed] = useState([])\n    const [thurs, setThurs] = useState([])\n    const [fri, setFri] = useState([])\n    const [sat, setSat] = useState([])\n    \n    const onClickTask = (event, id) => {\n        event.preventDefault();\n        const task = tasks.find((task) => id === task.id)\n        // console.log({id})\n        \n        setCurrentTask(task)\n    }\n    // day callback , shared code, look at current stuff and if they have values - take curretntask out of todo - set day with task added\n    const onClickDay = (event, id) => {\n        event.preventDefault();\n        const day = days.find((day) => id === day.id)\n        // console.log({id})\n        // console.log(task.id)\n        setCurrentDay(day)\n    }\n\n    useEffect(() => {\n        if (currentTask && currentDay) {\n            const index = todo.findIndex((task) => task.id === currentTask.id);\n            // console.log({index})\n            const newTodo = todo.slice();\n            if (index > -1) {\n                newTodo.splice(index, 1);\n            }\n            setTodo(newTodo)\n            // console.log(todo)\n            if (currentDay.id === 'sunday') {\n                const newSun = sun.slice()\n                newSun.push(currentTask)\n                setSun(newSun)\n            } else if (currentDay.id === 'monday') {\n                const newMon = mon.slice()\n                newMon.push(currentTask)\n                setMon(newMon)\n            } else if (currentDay.id === 'tuesday') {\n                const newTues = tues.slice()\n                newTues.push(currentTask)\n                setTues(newTues)\n            } else if (currentDay.id === 'wednesday') {\n                const newWed = wed.slice()\n                newWed.push(currentTask)\n                setWed(newWed)\n            } else if (currentDay.id === 'thursday') {\n                const newThurs = thurs.slice()\n                newThurs.push(currentTask)\n                setThurs(newThurs)\n            } else if (currentDay.id === 'friday') {\n                const newFri = fri.slice()\n                newFri.push(currentTask)\n                setFri(newFri)\n            } else if (currentDay.id === 'saturday') {\n                const newSat = sat.slice()\n                newSat.push(newSat)\n                setSat(newSat)\n            } else if (currentDay.id === 'todo') {\n                const newTodo = todo.slice()\n                newTodo.push(currentTask)\n                setTodo(newTodo)\n            }\n            setCurrentDay(null)\n            setCurrentTask(null)\n        }\n    }, [currentTask, currentDay])\n    \n    let renderedTodos = []\n    if (todo.length > 0) {\n        renderedTodos = todo.map((task) => {\n            return <Task \n                name={task.name}\n                id={task.id}\n                key={task.id}\n                type={task.type}\n                category={task.category}\n                complete={task.complete}\n                onClickTask={onClickTask}\n            />\n        })\n    }\n\n\n    let renderedSun = []\n    if (sun.length > 0) {\n        renderedSun = sun.map((task) => {\n            return <Task \n                name={task.name}\n                id={task.id}\n                key={task.id}\n                type={task.type}\n                category={task.category}\n                complete={task.complete}\n                onClickTask={onClickTask}\n            />\n        })\n    }\n\n    let renderedMon = []\n    if (mon.length > 0) {\n        renderedMon = mon.map((task) => {\n            return <Task \n                name={task.name}\n                id={task.id}\n                key={task.id}\n                type={task.type}\n                category={task.category}\n                complete={task.complete}\n                onClickTask={onClickTask}\n            />\n        })\n    }\n    \n    let renderedTues = []\n    if (tues.length > 0) {\n        renderedTues = tues.map((task) => {\n            return <Task \n                name={task.name}\n                id={task.id}\n                key={task.id}\n                type={task.type}\n                category={task.category}\n                complete={task.complete}\n                onClickTask={onClickTask}\n            />\n        })\n    }\n\n    let renderedWed = []\n    if (wed.length > 0) {\n        renderedWed = wed.map((task) => {\n            return <Task \n                name={task.name}\n                id={task.id}\n                key={task.id}\n                type={task.type}\n                category={task.category}\n                complete={task.complete}\n                onClickTask={onClickTask}\n            />\n        })\n    }\n\n    let renderedThurs = []\n    if (thurs.length > 0) {\n        renderedThurs = thurs.map((task) => {\n            return <Task \n                name={task.name}\n                id={task.id}\n                key={task.id}\n                type={task.type}\n                category={task.category}\n                complete={task.complete}\n                onClickTask={onClickTask}\n            />\n        })\n    }\n\n    let renderedFri = []\n    if (fri.length > 0) {\n        renderedFri = fri.map((task) => {\n            return <Task \n                name={task.name}\n                id={task.id}\n                key={task.id}\n                type={task.type}\n                category={task.category}\n                complete={task.complete}\n                onClickTask={onClickTask}\n            />\n        })\n    }\n\n    let renderedSat = []\n    if (sat.length > 0) {\n        renderedSat = sat.map((task) => {\n            return <Task \n                name={task.name}\n                id={task.id}\n                key={task.id}\n                type={task.type}\n                category={task.category}\n                complete={task.complete}\n                onClickTask={onClickTask}\n            />\n        })\n    }\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        const data = {\n            email: props.user.email,\n            schedule: [sun, mon, tues, wed, thurs, fri, sat]\n        }\n        axios.post(`${props.url}/set-schedule`, {data: data})\n        .then(res => {\n            console.log(res)\n        })\n        .catch(error => {\n            console.log(error.message)\n        })\n    }\n    // join table\n    // save as string - turn into array - access data -janky option\n    // json aggregate table\n    // list of strings\n\n\n\n    // set up arrays for each day of the day of the week/todo from usestate\n    // from the task sort them and put them into each piece of state they need to go in useEffect?\n    // function sort tasks into state\n    // display them .map\n    // function onClick a task and then clicking on day of the week heading, grabs day of week, changes category, takes task and puts into proper array\n    // multiple onClick events\n    // reset button\n\n\n\n\n   \n    return (\n        <form className=\"calender\" onSubmit={onSubmit}>\n            <div className=\"column\">\n                <button id=\"todo\" onClick={(event) => onClickDay(event, \"todo\")}>Todo</button>\n                {renderedTodos}\n            </div>\n            <div className=\"column\">\n                <button id=\"sunday\" onClick={(event) => onClickDay(event, \"sunday\")}>Sunday</button>\n                {renderedSun}\n            </div>\n            <div className=\"column\">\n            <button id=\"monday\" onClick={(event) => onClickDay(event, \"monday\")}>Monday</button>\n                {renderedMon}\n            </div>\n            <div className=\"column\">\n                <button id=\"tuesday\" onClick={(event) => onClickDay(event, \"tuesday\")}>Tuesday</button>\n                {renderedTues}\n            </div>\n            <div className=\"column\">\n                <button id=\"wednesday\" onClick={(event) => onClickDay(event, \"wednesday\")}>Wednesday</button>\n                {renderedWed}\n            </div>\n            <div className=\"column\">\n                <button id=\"thursday\" onClick={(event) => onClickDay(event, \"thursday\")}>Thursday</button>\n                {renderedThurs}\n            </div>\n            <div className=\"column\">\n                <button id=\"friday\" onClick={(event) => onClickDay(event, \"friday\")}>Friday</button>\n                {renderedFri}\n            </div>\n            <div className=\"column\">\n                <button id=\"saturday\" onClick={(event) => onClickDay(event, \"saturday\")}>Saturday</button>\n                {renderedSat}\n            </div>\n            <button type=\"submit\">Save Schedule</button>\n        </form>\n    )\n}\n\nexport default Calendar;\n\n","/Users/taylortompkins/Ada/climb-it-change-react/src/components/Task.js",[],"/Users/taylortompkins/Ada/climb-it-change-react/src/App.js",["61","62"],"/Users/taylortompkins/Ada/climb-it-change-react/src/components/Users.js",["63"],"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport User from './User'\n\nconst Users = (props) => {\n    const [users, setUsers] = useState([]);\n    const [errorMessage, setErrorMessage] = useState('')\n\n    useEffect(() => {\n        axios.get(`${props.url}/api/users`)\n            .then((response) => {\n                const userList = response.data\n                setUsers(userList);\n            })\n            .catch((error) => {\n                setErrorMessage(error.message);\n            })\n    }, []);\n\n    const userComponents = users.map((user) => {\n        return (<User\n            key={user.id}\n            id={user.id}\n            name={user.name}\n            email={user.email}\n            level={user.level}\n            member_since={user.member_since}\n            plan={user.plan}\n            workout_count={user.workout_count}\n            sesh_count={user.sesh_count}\n            ant_count={user.ant_count}\n        />)\n    });\n\n    return (\n        <div>\n            {errorMessage ? <p>{errorMessage}</p> : ''}\n            {userComponents}\n        </div>\n    )\n}\n\nUsers.propTypes = {\n    url: PropTypes.string.isRequired\n}\n\nexport default Users;",["64","65"],"/Users/taylortompkins/Ada/climb-it-change-react/src/components/NewUserForm.js",[],"/Users/taylortompkins/Ada/climb-it-change-react/src/index.js",["66"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/taylortompkins/Ada/climb-it-change-react/src/components/Workouts.js",["67"],"/Users/taylortompkins/Ada/climb-it-change-react/src/components/CalendarContent.js",["68","69","70"],"/Users/taylortompkins/Ada/climb-it-change-react/src/components/Dashboard.js",["71"],"/Users/taylortompkins/Ada/climb-it-change-react/src/components/SetTask.js",[],"/Users/taylortompkins/Ada/climb-it-change-react/src/components/Homepage.js",[],"/Users/taylortompkins/Ada/climb-it-change-react/src/components/Plan.js",["72","73"],"/Users/taylortompkins/Ada/climb-it-change-react/src/reportWebVitals.js",[],{"ruleId":"74","severity":1,"message":"75","line":2,"column":8,"nodeType":"76","messageId":"77","endLine":2,"endColumn":11},{"ruleId":"74","severity":1,"message":"78","line":5,"column":8,"nodeType":"76","messageId":"77","endLine":5,"endColumn":23},{"ruleId":"79","severity":1,"message":"80","line":102,"column":8,"nodeType":"81","endLine":102,"endColumn":33,"suggestions":"82"},{"ruleId":"74","severity":1,"message":"83","line":1,"column":27,"nodeType":"76","messageId":"77","endLine":1,"endColumn":36},{"ruleId":"74","severity":1,"message":"84","line":8,"column":3,"nodeType":"76","messageId":"77","endLine":8,"endColumn":11},{"ruleId":"79","severity":1,"message":"85","line":19,"column":8,"nodeType":"81","endLine":19,"endColumn":10,"suggestions":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"74","severity":1,"message":"91","line":6,"column":10,"nodeType":"76","messageId":"77","endLine":6,"endColumn":25},{"ruleId":"79","severity":1,"message":"85","line":24,"column":8,"nodeType":"81","endLine":24,"endColumn":10,"suggestions":"92"},{"ruleId":"74","severity":1,"message":"91","line":2,"column":10,"nodeType":"76","messageId":"77","endLine":2,"endColumn":25},{"ruleId":"74","severity":1,"message":"93","line":2,"column":27,"nodeType":"76","messageId":"77","endLine":2,"endColumn":36},{"ruleId":"74","severity":1,"message":"94","line":2,"column":38,"nodeType":"76","messageId":"77","endLine":2,"endColumn":47},{"ruleId":"74","severity":1,"message":"83","line":1,"column":26,"nodeType":"76","messageId":"77","endLine":1,"endColumn":35},{"ruleId":"74","severity":1,"message":"95","line":2,"column":8,"nodeType":"76","messageId":"77","endLine":2,"endColumn":17},{"ruleId":"79","severity":1,"message":"96","line":31,"column":8,"nodeType":"81","endLine":31,"endColumn":10,"suggestions":"97"},"no-unused-vars","'Day' is defined but never used.","Identifier","unusedVar","'CalendarContent' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fri', 'mon', 'sat', 'sun', 'thurs', 'todo', 'tues', and 'wed'. Either include them or remove the dependency array.","ArrayExpression",["98"],"'useEffect' is defined but never used.","'Redirect' is defined but never used.","React Hook useEffect has a missing dependency: 'props.url'. Either include it or remove the dependency array.",["99"],"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"'DragDropContext' is defined but never used.",["102"],"'Droppable' is defined but never used.","'Draggable' is defined but never used.","'PropTypes' is defined but never used.","React Hook useEffect has missing dependencies: 'plan', 'props.url', and 'props.user.email'. Either include them or remove the dependency array.",["103"],{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"no-global-assign","no-unsafe-negation",{"desc":"106","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [currentTask, currentDay, todo, sun, mon, tues, wed, thurs, fri, sat]",{"range":"111","text":"112"},"Update the dependencies array to be: [props.url]",{"range":"113","text":"114"},{"range":"115","text":"114"},"Update the dependencies array to be: [plan, props.url, props.user.email]",{"range":"116","text":"117"},[4172,4197],"[currentTask, currentDay, todo, sun, mon, tues, wed, thurs, fri, sat]",[571,573],"[props.url]",[608,610],[962,964],"[plan, props.url, props.user.email]"]